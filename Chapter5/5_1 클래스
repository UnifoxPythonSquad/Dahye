"""
 문제1
 다음은 계산기처럼 동작하는 Calculator클래스이다. add라는 메서드를 이용하면
 현재 계산기의 객체 변수 value에 입력으로 받은 값을 더해 준다.

 '''
  class Calculator:
     def __init__(self):
         self.value = 0
 
     def add(val):
         self.value += val
 '''
 위와 같은 Calculator 클래스를 다음과 같이 사용하였다.

 '''
 cal = Calculator()
 cal.add(3)
 cal.add(4)
 
 print(cal.value)  # 7을 출력해야 한다.
 '''
 3과 4를 add했으므로 객체변수 value가 7이 되어
 7을 출력해야 하지만 다음과 같은 오류가 발생했다.

 '''
 Traceback (most recent call last):
   File "....py", line 9, in <module>
     cal.add(3)
 TypeError: add() takes 1 positional argument but 2 were given
 '''
 오류가 발생하지 않도록 클래스의 잘못된 부분을 찾아 고치시오.

"""
class Calculator:
    def __init__(self):
        self.value=0
    def add(self,val):
        self.value+=val

print("cal=Calculator()")
cal=Calculator()
print("cal.add(3)")
cal.add(3)
print("cal.add(4)")
cal.add(4)
print("\n")

"""
 문제2
 다음과 같은 Calculator 클래스가 있다.
 
 '''
 class Calculator:
     def __init__(self, init_value):
         self.value = init_value
 
     def add(self, val):
         self.value += val
 '''
 이 클래스를 다음과 같이 사용해 보았다.

 '''
 cal = Calculator()
 cal.add(3)
 cal.add(4)
 
 print(cal.value)
 '''
 위 코드를 실행했더니 다음과 같은 오류가 발생한다.

 '''
 Traceback (most recent call last):
   File "....py", line 8, in <module>
     cal = Calculator()
 TypeError: __init__() missing 1 required positional argument: 'init_value'
 '''
 오류가 난 이유가 무엇인지 설명하고 오류를 해결하시오.
 
"""
#객체생성시 입력인수를 입력해야한다.
class Calculator2:
    def __init__(self,init_value):
        self.value=init_value
    def add(self,val):
        self.value+=val

print("cal=Calculator(0)")
cal=Calculator2(0)
print("cal.add(3)")
cal.add(3)
print("cal.add(4)")
cal.add(4)
print("\n")

"""
 문제3
 다음은 Calculator 클래스이다.

 '''
 class Calculator:
     def __init__(self):
         self.value = 0
 
     def add(self, val):
        self.value += val
 '''
 위 클래스를 상속하는 UpgradeCalculator를 만들고 값을 뺄 수 있는 minus 메서드를 추가하시오.
 즉, 다음과 같이 동작하는 클래스를 만드시오.
 
 '''
 cal = UpgradeCalculator()
 cal.add(10)
 cal.minus(7)
 
 print(cal.value)  # 10에서 7을뺀 3을 출력
 '''

"""
class UpgradeCalculator(Calculator):
    def minus(self,val):
        self.value-=val

cal=UpgradeCalculator()
print("cal=UpgradeCalculator()")
cal.add(10)
print("cal.add(10)")
cal.minus(7)
print("cal.minus(7)")
print("print(cal.value)")
print(cal.value)
print("\n")

"""
 문제4
 이번에 여러분이 작성해야 하는 클래스는 MaxLimitCalculator 클래스이다.
 MaxLimitCalculator 클래스는 객체변수 value가 100이상의 값은 가질 수 없도록
 제한하는 클래스이다. 즉, 다음과 같이 동작해야 한다.

 '''
 cal = MaxLimitCalculator()
 cal.add(50)  # 50 더하기
 cal.add(60)  # 60 더하기
 
 print(cal.value)  # 100 출력
 '''
 단, 한가지 전제 조건은 반드시 다음과 같은 Calculator 클래스를
 상속해서 만들어야 한다는 것이다.

 '''
 class Calculator:
     def __init__(self):
         self.value = 0
 
     def add(self, val):
         self.value += val
 '''
 위와 같은 조건을 만족하는 MaxLimitCalculator 클래스를 작성하시오.

"""
class MaxLimitCalculator(Calculator):
    def add(self,val):
        self.value+=val
        if self.value>100:
            self.value=100

print("cal=MaxLimitCalculator()")
cal=MaxLimitCalculator()
print("cal.add(50)")
cal.add(50)
print("cal.add(60)")
cal.add(60)
print("print(cal.value)")
print(cal.value)
print("\n")

"""
 문제5
 다음과 같이 동작하는 Calculator 클래스를 작성하시오.

 '''
 cal1 = Calculator([1,2,3,4,5])
 print(cal1.sum())  # 15 출력
 print(cal1.avg())  # 3.0 출력
 
 cal2 = Calculator([6,7,8,9,10])
 print(cal2.sum())  # 40 출력
 print(cal2.avg())  # 8.0 출력
 '''
 
"""
class Calculaotr3:
    def __init__(self,numberList):
        self.numberList=numberList

    def sum(self):
        result=0
        for num in self.numberList:
            result+=num
        return result

    def avg(self):
        total=self.sum()
        return total/len(self.numberList)
print("\n")
