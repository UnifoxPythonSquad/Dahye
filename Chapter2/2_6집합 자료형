"""
   문제 1

   ['a', 'b', 'c'] 라는 리스트를 집합 자료형으로 만드시오.

"""
s1=set(['a','b','c'])


"""
   문제 2

   중복을 허용하지 않는 집합 자료형의 특징을 이용하여
   리스트  a = [1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5]에서 중복된 숫자들을 제거하시오.

"""
a = set([1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5])
print(a)


"""
   문제 3

   s1 = set(['a', 'b', 'c', 'd', 'e'])
   s2 = set(['c', 'd', 'e', 'f', 'g']) 에서
   s1 집합의 항목 중 s2 집합에 포함된 항목을 제거하시오.

"""
s1 = set(['a', 'b', 'c', 'd', 'e'])
s2 = set(['c', 'd', 'e', 'f', 'g'])
print(s1-s2)


"""
   문제 4

   집합 자료형은 다음과 같이 만들 수 있다.
   
    '''
    >>> a = {'a', 'b', 'c'}
    >>> a
    {'a', 'b', 'c'}
    >>> type(a)
    <class 'set'>
    '''
    
    값이 하나도 없는 비어있는 set을 만들기 위해 다음과 같이 시도 해 보자.

    '''
    >>> a = {}
    >>> type(a)
    <class 'dict'>
    '''
    
    위와 같이 값이 있을 경우에는 집합 자료형으로 인식했지만 값이 없을경우에는
    딕셔너리로 인식하게 된다. 그렇다면 값이 비어있는 집합 자료형은
    어떻게 만들 수 있을까?

"""
#set함수를 이용하여 'a=set()'을 하게 되면 비어있는 집합 자료형을 만들 수 있다.

"""
   문제 5

   집합 자료형 a = {'a', 'b', 'c'}에 {'d', 'e', 'f'} 를 추가하시오.

"""
a = set(['a', 'b', 'c'])
a.update(['d', 'e', 'f'])
print(a)


